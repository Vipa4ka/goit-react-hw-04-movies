{"version":3,"sources":["Services/Api.js","Views/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchError","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchPopularFilms","fetchMovieSearch","search","fetchMovieInfo","filmid","fetchСast","fetchRequestForMovie","MoviesPage","useState","searchs","setSearch","useRouteMatch","location","useLocation","history","useHistory","query","qs","parse","useEffect","Api","then","results","catch","error","console","log","onSubmit","e","preventDefault","target","elements","searching","value","trim","alert","push","className","styles","moviesInput","type","placeholder","name","moviesPage","map","id","title","poster_path","to","pathname","state","backUrl","src","alt","width","height"],"mappings":"gVAAMA,EAAW,+BACXC,EAAU,mC,SAGDC,I,2EAAf,4CAAAC,EAAA,6DAA0BC,EAA1B,+BAAgC,GAAIC,EAApC,+BAA6C,GAA7C,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,oF,sBAQO,SAASC,IACd,OAAOX,EAAW,GAAD,OAAIF,EAAJ,qCAAyCC,IAIrD,SAASa,EAAiBC,GAC/B,OAAOb,EAAW,GAAD,OACZF,EADY,iCACqBC,EADrB,kBACsCc,IAKlD,SAASC,EAAeC,GAC7B,OAAOf,EAAW,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,oBAAwChB,IAIpD,SAASiB,EAAUD,GACxB,OAAOf,EAAW,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAgDhB,IAI5D,SAASkB,EAAqBF,GACnC,OAAOf,EAAW,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAgDhB,M,yKC5BpD,SAASmB,IAAc,IAAD,EACnC,EAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KACQnB,EAAQoB,cAARpB,IACFqB,EAAWC,cACXC,EAAUC,cACVC,GAAQ,UAAAC,IAAGC,MAAMN,EAASV,eAAlB,eAA2Bc,QAAS,GAwBlD,OAXAG,qBAAU,WACM,KAAVH,GAGJI,IAAqBJ,GAClBK,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPZ,EAAUY,MAEXC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,CAACR,IAGF,gCACE,uBAAMW,SAxBU,SAACC,GAEnB,GADAA,EAAEC,iBAC+C,KAA7CD,EAAEE,OAAOC,SAASC,UAAUC,MAAMC,OACpC,OAAOC,MAAM,4BAEfrB,EAAQsB,KAAR,2BACKxB,GADL,IAEEV,OAAO,SAAD,OAAW0B,EAAEE,OAAOC,SAASC,UAAUC,WAiB7C,UACE,uBACEI,UAAWC,IAAOC,YAClBC,KAAK,OACLC,YAAY,gBACZC,KAAK,cAEP,wBAAQF,KAAK,SAAb,uBAED/B,GACC,oBAAI4B,UAAWC,IAAOK,WAAtB,SACGlC,EAAQmC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOJ,EAAd,EAAcA,KAAMK,EAApB,EAAoBA,YAApB,OACX,6BACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAK1D,EAAL,YAAYsD,GACpBK,MAAO,CACLC,QAASvC,IAJf,UAQE,qBACEwC,IACkB,OAAhBL,EAAA,yCACsCA,GAClC,qIAENM,IAAG,OAAEP,QAAF,IAAEA,IAASJ,EACdY,MAAM,QACNC,OAAO,UAET,mBAAGlB,UAAWC,IAAOQ,MAArB,SAA6BA,QAnBxBD","file":"static/js/MoviesPage.2d723eb4.chunk.js","sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"3ffe89a3ccd04801febc3db968502921\";\nexport const IMAGE_URL = \"https://image.tmdb.org/t/p/w500\";\n\nasync function fetchError(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\n//список самых популярных фильмов на сегодня\nexport function fetchPopularFilms() {\n  return fetchError(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`);\n}\n\n//поиск кинофильма по ключевому слову на странице фильмов\nexport function fetchMovieSearch(search) {\n  return fetchError(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${search}`\n  );\n}\n\n// запрос полной информации о фильме для страницы кинофильма.\nexport function fetchMovieInfo(filmid) {\n  return fetchError(`${BASE_URL}/movie/${filmid}?api_key=${API_KEY}`);\n}\n\n// запрос информации о актёрском составе для страницы кинофильма.\nexport function fetchСast(filmid) {\n  return fetchError(`${BASE_URL}/movie/${filmid}/credits?api_key=${API_KEY}`);\n}\n\n// запрос обзоров для страницы кинофильма.\nexport function fetchRequestForMovie(filmid) {\n  return fetchError(`${BASE_URL}/movie/${filmid}/reviews?api_key=${API_KEY}`);\n}\n","import { useState, useEffect } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { useHistory, useLocation } from \"react-router\";\nimport qs from \"query-string\";\nimport styles from \"./Views.module.css\";\nimport * as Api from \"../Services/Api\";\n\nexport default function MoviesPage() {\n  const [searchs, setSearch] = useState([]);\n  const { url } = useRouteMatch();\n  const location = useLocation();\n  const history = useHistory();\n  const query = qs.parse(location.search)?.query || \"\";\n\n  const changeInput = (e) => {\n    e.preventDefault();\n    if (e.target.elements.searching.value.trim() === \"\") {\n      return alert(\"Enter a value to search.\");\n    }\n    history.push({\n      ...location,\n      search: `query=${e.target.elements.searching.value}`,\n    });\n  };\n\n  useEffect(() => {\n    if (query === \"\") {\n      return;\n    }\n    Api.fetchMovieSearch(query)\n      .then(({ results }) => {\n        setSearch(results);\n      })\n      .catch((error) => console.log(error));\n  }, [query]);\n\n  return (\n    <div>\n      <form onSubmit={changeInput}>\n        <input\n          className={styles.moviesInput}\n          type=\"text\"\n          placeholder=\"Search movies\"\n          name=\"searching\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {searchs && (\n        <ul className={styles.moviesPage}>\n          {searchs.map(({ id, title, name, poster_path }) => (\n            <li key={id}>\n              <Link\n                to={{\n                  pathname: `${url}/${id}`,\n                  state: {\n                    backUrl: location,\n                  },\n                }}\n              >\n                <img\n                  src={\n                    poster_path !== null\n                      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                      : \"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_square_2-d537fb228cf3ded904ef09b136fe3fec72548ebc1fea3fbbd1ad9e36364db38b.svg\"\n                  }\n                  alt={title ?? name}\n                  width=\"220px\"\n                  height=\"350px\"\n                />\n                <p className={styles.title}>{title}</p>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}