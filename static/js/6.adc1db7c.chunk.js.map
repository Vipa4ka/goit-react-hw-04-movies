{"version":3,"sources":["Services/Api.js","Views/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchError","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchPopularFilms","fetchMovieSearch","search","fetchMovieInfo","filmid","fetchСast","fetchRequestForMovie","MoviesPage","useState","searchs","setSearch","useRouteMatch","location","useLocation","history","useHistory","query","qs","parse","useEffect","Api","then","results","catch","error","console","log","onSubmit","e","preventDefault","target","elements","searching","value","trim","alert","push","className","styles","moviesInput","type","placeholder","name","moviesPage","map","id","title","poster_path","to","pathname","state","backUrl","src","alt","width","height"],"mappings":"gVAAMA,EAAW,+BACXC,EAAU,mC,SAEDC,I,2EAAf,4CAAAC,EAAA,6DAA0BC,EAA1B,+BAAgC,GAAIC,EAApC,+BAA6C,GAA7C,SAC2BC,MAAMF,EAAKC,GADtC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,oF,sBASO,SAASC,IACZ,OAAOX,EAAW,GAAD,OAAIF,EAAJ,qCAAyCC,IAIvD,SAASa,EAAiBC,GAC7B,OAAOb,EAAW,GAAD,OAAIF,EAAJ,iCAAqCC,EAArC,kBAAsDc,IAIpE,SAASC,EAAeC,GAC3B,OAAOf,EAAW,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,oBAAwChB,IAItD,SAASiB,EAAUD,GACtB,OAAOf,EAAW,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAgDhB,IAI9D,SAASkB,EAAqBF,GACjC,OAAOf,EAAW,GAAD,OAAIF,EAAJ,kBAAsBiB,EAAtB,4BAAgDhB,M,yKC1BtD,SAASmB,IAAc,IAAD,EACnC,EAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KACQnB,EAAQoB,cAARpB,IACFqB,EAAWC,cACXC,EAAUC,cACVC,GAAQ,UAAAC,IAAGC,MAAMN,EAASV,eAAlB,eAA2Bc,QAAS,GAyBlD,OAXAG,qBAAU,WACM,KAAVH,GAGJI,IAAqBJ,GAClBK,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPZ,EAAUY,MAEXC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACR,IAGF,gCACE,uBAAMW,SAxBU,SAAAC,GAElB,GADAA,EAAEC,iBAC+C,KAA7CD,EAAEE,OAAOC,SAASC,UAAUC,MAAMC,OACpC,OAAOC,MAAM,4BAEfrB,EAAQsB,KAAR,2BACKxB,GADL,IAEEV,OAAO,SAAD,OAAW0B,EAAEE,OAAOC,SAASC,UAAUC,WAiB7C,UACE,uBAAOI,UAAWC,IAAOC,YAAaC,KAAK,OAAOC,YAAY,gBAAgBC,KAAK,cACnF,wBAAQF,KAAK,SAAb,uBAED/B,GACC,oBAAI4B,UAAWC,IAAOK,WAAtB,SACGlC,EAAQmC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOJ,EAAd,EAAcA,KAAMK,EAApB,EAAoBA,YAApB,OACX,6BACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAK1D,EAAL,YAAYsD,GACpBK,MAAO,CACLC,QAASvC,IAJf,UAQE,qBACEwC,IACkB,OAAhBL,EAAA,yCACsCA,GAClC,qIAENM,IAAG,OAAEP,QAAF,IAAEA,IAASJ,EACdY,MAAM,QACNC,OAAO,UAET,mBAAIlB,UAAWC,IAAOQ,MAAtB,SAA8BA,QAnBzBD","file":"static/js/6.adc1db7c.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '3ffe89a3ccd04801febc3db968502921';\r\n\r\nasync function fetchError(url = '', config = {}) {\r\n    const response = await fetch(url, config);\r\n    return response.ok\r\n        ? await response.json()\r\n        : Promise.reject(new Error('Not found'));\r\n\r\n}\r\n\r\n//список самых популярных фильмов на сегодня\r\nexport function fetchPopularFilms() {\r\n    return fetchError(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`)\r\n}\r\n\r\n//поиск кинофильма по ключевому слову на странице фильмов\r\nexport function fetchMovieSearch(search) {\r\n    return fetchError(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${search}`)    \r\n}\r\n\r\n// запрос полной информации о фильме для страницы кинофильма.\r\nexport function fetchMovieInfo(filmid) {\r\n    return fetchError(`${BASE_URL}/movie/${filmid}?api_key=${API_KEY}`)\r\n}\r\n\r\n// запрос информации о актёрском составе для страницы кинофильма.\r\nexport function fetchСast(filmid) {\r\n    return fetchError(`${BASE_URL}/movie/${filmid}/credits?api_key=${API_KEY}`)\r\n}\r\n\r\n// запрос обзоров для страницы кинофильма.\r\nexport function fetchRequestForMovie(filmid) {\r\n    return fetchError(`${BASE_URL}/movie/${filmid}/reviews?api_key=${API_KEY}`)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { Link, useRouteMatch } from \"react-router-dom\"\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport qs from 'query-string';\r\nimport styles from './Views.module.css'\r\nimport * as Api from '../Services/Api';\r\n\r\nexport default function MoviesPage() {\r\n  const [searchs, setSearch] = useState([]);\r\n  const { url } = useRouteMatch();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const query = qs.parse(location.search)?.query || '';\r\n  \r\n\r\n  const changeInput = e => {\r\n    e.preventDefault();\r\n    if (e.target.elements.searching.value.trim() === '') {\r\n      return alert('Enter a value to search.');\r\n    }\r\n    history.push({\r\n      ...location,\r\n      search: `query=${e.target.elements.searching.value}`,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (query === '') {\r\n      return;\r\n    }\r\n    Api.fetchMovieSearch(query)\r\n      .then(({ results }) => {\r\n        setSearch(results);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, [query]);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={changeInput}>\r\n        <input className={styles.moviesInput} type=\"text\" placeholder=\"Search movies\" name=\"searching\" />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      {searchs && (\r\n        <ul className={styles.moviesPage}>\r\n          {searchs.map(({ id, title, name, poster_path }) => (\r\n            <li key={id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `${url}/${id}`,\r\n                  state: {\r\n                    backUrl: location,\r\n                  },\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    poster_path !== null\r\n                      ? `https://image.tmdb.org/t/p/w500${poster_path}`\r\n                      : 'https://www.themoviedb.org/assets/2/v4/logos/v2/blue_square_2-d537fb228cf3ded904ef09b136fe3fec72548ebc1fea3fbbd1ad9e36364db38b.svg'\r\n                  }\r\n                  alt={title ?? name}\r\n                  width=\"220px\"\r\n                  height=\"350px\"\r\n                />\r\n                <p  className={styles.title}>{title}</p>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}